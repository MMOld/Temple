/* *	  *	Temple Library for ActionScript 3.0 *	Copyright Â© 2009 MediaMonks B.V. *	All rights reserved. *	 *	THIS LIBRARY IS IN PRIVATE BETA, THEREFORE THE SOURCES MAY NOT BE *	REDISTRIBUTED IN ANY WAY. *	 *	Redistribution and use in source and binary forms, with or without *	modification, are permitted provided that the following conditions are met: *	 *	- Redistributions of source code must retain the above copyright notice, *	this list of conditions and the following disclaimer. *	 *	- Redistributions in binary form must reproduce the above copyright notice, *	this list of conditions and the following disclaimer in the documentation *	and/or other materials provided with the distribution. *	 *	- Neither the name of the Temple Library nor the names of its contributors *	may be used to endorse or promote products derived from this software *	without specific prior written permission. *	 *	 *	Temple Library is free software: you can redistribute it and/or modify *	it under the terms of the GNU Lesser General Public License as published by *	the Free Software Foundation, either version 3 of the License, or *	(at your option) any later version. *	 *	Temple Library is distributed in the hope that it will be useful, *	but WITHOUT ANY WARRANTY; without even the implied warranty of *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *	GNU Lesser General Public License for more details. *	 *	You should have received a copy of the GNU Lesser General Public License *	along with Temple Library.  If not, see <http://www.gnu.org/licenses/>. *	 */package temple.core {
	import temple.debug.Registry;	import temple.debug.getClassName;	import temple.debug.log.Log;	import temple.destruction.DestructEvent;	import temple.destruction.EventListenerManager;	import temple.destruction.IDestructableEventDispatcher;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	/**	 * Dispatched just before the object is destructed	 * @eventType temple.destruction.DestructEvent.DESTRUCT	 */	[Event(name = "DestructEvent.destruct", type = "temple.destruction.DestructEvent")]		/**	 * Base class for all EventDispatchers in the Temple. The CoreEventDispatcher handles some core features of the Temple:	 * <ul>	 * 	<li>Registration to the Registry class</li>	 * 	<li>Event dispatch optimization</li>	 * 	<li>Easy remove of all EventListeners</li>	 * 	<li>Wrapper for Log class for easy logging</li>	 * 	<li>Completely destructable</li>	 * 	<li>Can be tracked in Memory (of this feature is enabled)</li>	 * </ul>	 * 	 * <p>You should always use and/or extend the CoreSprite instead of Sprite if you want to make use of the Temple features.</p>	 * 	 * @author Thijs Broerse	 */	public class CoreEventDispatcher extends EventDispatcher implements IDestructableEventDispatcher, ICoreObject	{
		private var _eventListenerManager:EventListenerManager;		private var _isDestructed:Boolean;		private var _registryId:uint;		/**		 * Creates a new RemovableEventDispatcher.		 *			 * @param target The target object for events dispatched to the EventDispatcher object.		 */		public function CoreEventDispatcher(target:IEventDispatcher = null) 		{			super(target);						this._eventListenerManager = new EventListenerManager(this);						// Register object for destruction testing			this._registryId = Registry.add(this);		}				/**		 * @inheritDoc		 */		public final function get registryId():uint		{			return this._registryId;		}				/**		 * @inheritDoc		 * 		 * Check implemented if object hasEventListener, must speed up the application		 * http://www.gskinner.com/blog/archives/2008/12/making_dispatch.html		 */		override public function dispatchEvent(event:Event):Boolean 		{			if (this.hasEventListener(event.type) || event.bubbles) 			{				return super.dispatchEvent(event);			}			return true;		}		/**		 * @inheritDoc		 */		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void 		{			super.addEventListener(type, listener, useCapture, priority, useWeakReference);			this._eventListenerManager.addEventListener(type, listener, useCapture, priority, useWeakReference);		}		/**		 * @inheritDoc		 */		override public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void 		{			super.removeEventListener(type, listener, useCapture);			if (this._eventListenerManager) this._eventListenerManager.removeEventListener(type, listener, useCapture);		}		/**		 * @inheritDoc		 */		public function removeAllEventsForType(type:String):void 		{			this._eventListenerManager.removeAllEventsForType(type);		}		/**		 * @inheritDoc		 */		public function removeAllEventsForListener(listener:Function):void 		{			this._eventListenerManager.removeAllEventsForListener(listener);		}		/**		 * @inheritDoc		 */		public function removeAllEventListeners():void 		{			this._eventListenerManager.removeAllEventListeners();		}				/**		 * @inheritDoc		 */		public function get eventListenerManager():EventListenerManager		{			return this._eventListenerManager;		}		/**		 * Does a Log.debug, but has already filled in some known data		 * @param data the data to be logged		 */		protected final function logDebug(data:*):void		{			Log.debug(data, this, this._registryId);		}				/**		 * Does a Log.error, but has already filled in some known data		 * @param data the data to be logged		 */		protected final function logError(data:*):void		{			Log.error(data, this, this._registryId);		}				/**		 * Does a Log.fatal, but has already filled in some known data		 * @param data the data to be logged		 */		protected final function logFatal(data:*):void		{			Log.fatal(data, this, this._registryId);		}				/**		 * Does a Log.info, but has already filled in some known data		 * @param data the data to be logged		 */		protected final function logInfo(data:*):void		{			Log.info(data, this, this._registryId);		}				/**		 * Does a Log.status, but has already filled in some known data		 * @param data the data to be logged		 */		protected final function logStatus(data:*):void		{			Log.status(data, this, this._registryId);		}				/**		 * Does a Log.warn, but has already filled in some known data		 * @param data the data to be logged		 */		protected final function logWarn(data:*):void		{			Log.warn(data, this, this._registryId);		}		
		/**		 * @inheritDoc		 */		public function get isDestructed():Boolean
		{			return this._isDestructed;		}		/**		 * @inheritDoc		 */		public function destruct():void 		{			if (this._isDestructed) return;						this.dispatchEvent(new DestructEvent(DestructEvent.DESTRUCT));						if (this._eventListenerManager)			{				this.removeAllEventListeners();				this._eventListenerManager.destruct();				this._eventListenerManager = null;			}						this._isDestructed = true;		}		/**		 * @inheritDoc		 */		override public function toString():String		{			return getClassName(this);
		}	}
}
